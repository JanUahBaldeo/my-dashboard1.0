// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String
  password      String
  primaryRole   Role     @default(LO)
  permissions   Role[]
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  loans         Loan[]
  tasks         Task[]
  communications Communication[]
  notifications Notification[]
  appointments  Appointment[]

  @@map("users")
}

model Loan {
  id              String      @id @default(uuid())
  loanNumber      String      @unique
  borrowerName    String
  borrowerEmail   String?
  borrowerPhone   String?
  propertyAddress String
  loanType        LoanType
  loanAmount      Decimal
  targetCloseDate DateTime
  currentStage    String
  timeInStage     Int         @default(0) // in days
  status          LoanStatus  @default(ON_TRACK)
  progress        Int         @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  loanOfficerId   String
  loanOfficer     User        @relation(fields: [loanOfficerId], references: [id])
  tasks           Task[]
  documents       Document[]
  communications  Communication[]
  stageHistory    StageHistory[]

  @@map("loans")
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  category    String
  type        String
  priority    Priority   @default(MEDIUM)
  status      TaskStatus @default(PENDING)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  loanId    String?
  loan      Loan?   @relation(fields: [loanId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  @@map("tasks")
}

model Document {
  id         String         @id @default(uuid())
  name       String
  type       String
  status     DocumentStatus @default(REQUIRED)
  filePath   String?
  uploadedAt DateTime?
  dueDate    DateTime?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  // Relations
  loanId String
  loan   Loan   @relation(fields: [loanId], references: [id])

  @@map("documents")
}

model Communication {
  id        String            @id @default(uuid())
  type      CommunicationType
  subject   String?
  message   String
  direction String            // 'inbound' or 'outbound'
  createdAt DateTime          @default(now())

  // Relations
  loanId String?
  loan   Loan?   @relation(fields: [loanId], references: [id])
  userId String
  user   User    @relation(fields: [userId], references: [id])

  @@map("communications")
}

model Notification {
  id        String            @id @default(uuid())
  title     String
  message   String
  type      NotificationType  @default(INFO)
  isRead    Boolean           @default(false)
  createdAt DateTime          @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Appointment {
  id          String    @id @default(uuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  category    String
  color       String    @default("#3b82f6")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("appointments")
}

model StageHistory {
  id        String   @id @default(uuid())
  stage     String
  enteredAt DateTime @default(now())
  exitedAt  DateTime?
  duration  Int?     // in days

  // Relations
  loanId String
  loan   Loan   @relation(fields: [loanId], references: [id])

  @@map("stage_history")
}

model LeadSource {
  id           String @id @default(uuid())
  name         String @unique
  totalLeads   Int    @default(0)
  convertedLeads Int  @default(0)
  conversionRate Float @default(0.0)
  isActive     Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("lead_sources")
}

// Enums
enum Role {
  LO                // Loan Officer
  LOA               // Loan Officer Assistant
  PRODUCTION_PARTNER // Production Partner
  ADMIN
}

enum LoanType {
  CONVENTIONAL
  FHA
  VA
  USDA
  JUMBO
}

enum LoanStatus {
  ON_TRACK
  DELAYED
  AT_RISK
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DocumentStatus {
  REQUIRED
  PENDING
  RECEIVED
  REVIEWED
  APPROVED
}

enum CommunicationType {
  EMAIL
  PHONE
  SMS
  MEETING
  NOTE
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}